import numpy as np
import matplotlib.pyplot as plt
import scipy.signal as sig
import scipy.fft as fft

# Elektrokortikografski (engl. ECoG - electrocorticography) signali se dobijaju
# snimanjem električnih impulsa preko elektroda koje su postavljene unutar lobanje
# subjekta. ECoG signal se sastoji od dva dela: nisko frekventnog dela koji
# predstavlja potencijal lokalnog električnog polja (engl. LFP – local field
# potential) i visoko frekventno dela koji predstavlja aktivnost pojedinačnih
# neurona u okolini elektrode (engl. MUA – multyunit activity). LFP signal se
# može izdvojiti upotrebom niskofrekventnog filtra sa propusnim opsegom 0÷250
# Hz, nepropusnim preko 450 Hz i potiskivanjem u nepropusnom opsegu preko 40 dB.
# Dužina impulsnog odziva je 100. MUA signal se dobija pojasnim filtriranjem u
# opsegu 280 Hz do 6000 Hz, nepropusnim opsezima ispod 240 Hz i iznad 6200 Hz i
# potiskivanjem preko 50 dB. Dužina impulsnog odziva je 100. U fajlu raw.txt je
# sadržan ECoG signal raw snimljen preko elektroda implantiranih u mozak makaki
# majmuna. Projektovati filtre Flp i Fbp zadatih specifikacija koristeći funkciju
# scipy.signal.firwin. Upotrebom niskofrekventnog filtra Flp iz ECoG signala
# izdvojiti LFP komponentu. Prikazati i analizirati spektar filtra Flp.
# Korišćenjem pojasnog filtra Fbp iz ECoG signal izdvojiti MUA komponentu.
# Analizirati spektar filtra Fbp. Frekvencija odabiranja signala raw je 22321 Hz.

plt.rcParams['figure.figsize'] = [15, 5]

ecog = np.loadtxt('raw.txt')
fs = 22321

dFlp = 200
dWlp = 2*np.pi*dFlp/fs
Nlp = np.ceil(6.2*np.pi/dWlp)+1 #+1 jer bi inace imao necelobrojno kasnjenje
Flp = sig.firwin(int(Nlp), 350/(fs/2),window = 'hann', pass_zero='lowpass')

dFbp = 40
dWbp = 2*np.pi*dFbp/fs
Nbp = np.ceil(6.6*np.pi/dWbp)+1 #+1 jer bi inace imao necelobrojno kasnjenje
Fbp = sig.firwin(int(Nbp), np.array([260/(fs/2), 6100/(fs/2)]), window='hamming', pass_zero='bandpass')

LFP = sig.convolve(ecog, Flp, 'same')
MUA = sig.convolve(ecog, Fbp, 'same')
#LFP = fft.ifft(fft.fft(Flp, n=ecog.size)*fft.fft(ecog))
#MUA = ifft(fft(Fbp, n=ecog.size).*fft(ecog))

t=np.arange(ecog.size)/fs

plt.figure()
plt.plot(t, ecog)
plt.title('ECoG signal')
plt.plot

plt.figure()
plt.plot(t, LFP)
plt.title('LFP signal')
plt.plot

plt.figure()
plt.plot(t, MUA)
plt.title('MUA signal')
plt.plot