import numpy as np
import matplotlib.pyplot as plt
import scipy.signal as sig
plt.rcParams['figure.figsize'] = [15, 10]

# Odrediti i prikazati signale dobijene konvolucijom diskretnih signala:
#
# a(n)=3δ(n)−δ(n−1)+3δ(n−2)−2δ(n−3)+δ(n−4)
#
# b(n)−2δ(n)−2δ(n−1)+2δ(n−2)
#
# pri čemu je prvi signal konvolucije određen tako da ima isti broj elemenata kao i signal a(n),
# a drugi signal konvolucije sadrži samo elemente koji nisu nastali proširenjem signala prilikom
# računanja (dodavanje nula na krajeve).

na = np.arange(0,5)
a = np.array([3, -1, 3, -2, 1])

nb = np.arange(0,3)
b = np.array([2, -2, 2])

plt.figure()
plt.stem(na, a, use_line_collection=True)
plt.title('a(n)')
plt.show()

plt.figure()
plt.stem(nb, b, use_line_collection=True)
plt.title('b(n)')
plt.show()

#Vektor vremena za konvoluciju
nc = np.arange(na[0]+nb[0], na[-1]+nb[-1]+1)

#Konvolucija koja zadrzava isti broj elemenata kao u prvom signalu
c1 = sig.convolve(a, b, mode='same')

#Odredjivanje vektora vremena za c1
p1 = int(np.round((len(b)-1)/2))
nc1 = nc[p1:p1+len(a)]

plt.figure()
plt.stem(nc1, c1, use_line_collection=True)
plt.title('c1(n)')
plt.show()

#Konvolucija koja zadrzava elemente koji nisu nastali prosirenjem
c2 = sig.convolve(a, b, mode='valid')

#Odredjivanje vektora vremena za c2
p2 = np.minimum(len(a), len(b))-1
nc2 = nc[p2:-p2]

plt.figure()
plt.stem(nc2, c2, use_line_collection=True)
plt.title('c2(n)')
plt.show()